package org.vicomtech.opener.kaf2json;

/**
 * This class translates KAF format to JSON format
 * It is a wrapper for CNR kaf2json.xsl stylesheet
 * @author mcuadros
 *
 */
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;
import org.xml.sax.InputSource;

import org.w3c.dom.Document;


import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


// For write operation
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.stream.StreamResult;




public class Main {
    // Global value so it can be ref'd by the tree-adapter
    static Document document;
    private static enum ExitStatus {
		SUCCESS(0), ERROR(-1);
		int value;
		ExitStatus(int i) {
			value = i;
		}
	}
    public static void main(String[] args) {
		Main prog = new Main();
		prog.execute(args, System.in, System.out);	
	}
    
    public void execute(String[] args, InputStream inStream, OutputStream outStream) {
		
		checkArguments(args);
	
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        Document document=null;
       
        try {
        
        	
            //String stylesheet=Main.class.getResource("/kaf2json.xsl").getPath();
        	String stylesheet="kaf2json.xsl";
            
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(new InputSource (inStream));            

            // Use a Transformer for output
            TransformerFactory tFactory = TransformerFactory.newInstance();
            Transformer transformer = tFactory.newTransformer(new StreamSource (stylesheet));

            DOMSource source = new DOMSource(document);
            StreamResult result = new StreamResult(System.out);
            transformer.transform(source, result);
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            System.out.println("\n** Transformer Factory error");
            System.out.println("   " + tce.getMessage());

            // Use the contained exception, if any
            Throwable x = tce;

            if (tce.getException() != null) {
                x = tce.getException();
            }

            x.printStackTrace();
        } catch (TransformerException te) {
            // Error generated by the parser
            System.out.println("\n** Transformation error");
            System.out.println("   " + te.getMessage());

            // Use the contained exception, if any
            Throwable x = te;

            if (te.getException() != null) {
                x = te.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
    	
    	
    	
    }
    
    
   
    
    private void checkArguments(String[] args) {
		for (String arg : args) {
			if (arg.equalsIgnoreCase("-h") || arg.equalsIgnoreCase("--help")) {
				printUsage();
				System.exit(ExitStatus.SUCCESS.value);
			}
			else {
				System.err.println(String.format("unknown argument: %s", arg));
				printUsage();
				System.exit(ExitStatus.ERROR.value);
			}
		}
	}
    
    private void printUsage() {
		System.err.println("Translates KAF format to JSON format.");
		System.err.println();
		System.err.println("USAGE:   java -jar kaf2json-0.0.1-SNAPSHOT.jar [OPTIONS...]");
		System.err.println("Reads text from standard input and writes result at standard output.");
		System.err.println();
		System.err.println("  OPTIONS:");
		System.err.println("    -h, --help       shows this help");
	}
}
